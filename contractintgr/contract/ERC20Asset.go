// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ERC20AssetMetaData contains all meta data concerning the ERC20Asset contract.
var ERC20AssetMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"SC_GATEWAY_ORACLE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"SC_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620034233803806200342383398181016040528101906200003791906200054f565b828281600590816200004a919062000834565b5080600690816200005c919062000834565b505050620000836000801b62000077620000e860201b60201c565b620000f060201b60201c565b620000c47fb49ea64ca9363ee24557fab3bed24140051b27b150a6658dd9436859666b2805620000b8620000e860201b60201c565b620000f060201b60201c565b80600760006101000a81548160ff021916908360ff1602179055505050506200091b565b600033905090565b6200010282826200010660201b60201c565b5050565b6200011d82826200014e60201b62000ba11760201c565b6200014981600160008581526020019081526020016000206200023f60201b62000c811790919060201c565b505050565b6200016082826200027760201b60201c565b6200023b57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001e0620000e860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006200026f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620002e160201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000620002f583836200035b60201b60201c565b6200035057826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000355565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003e7826200039c565b810181811067ffffffffffffffff82111715620004095762000408620003ad565b5b80604052505050565b60006200041e6200037e565b90506200042c8282620003dc565b919050565b600067ffffffffffffffff8211156200044f576200044e620003ad565b5b6200045a826200039c565b9050602081019050919050565b60005b83811015620004875780820151818401526020810190506200046a565b60008484015250505050565b6000620004aa620004a48462000431565b62000412565b905082815260208101848484011115620004c957620004c862000397565b5b620004d684828562000467565b509392505050565b600082601f830112620004f657620004f562000392565b5b81516200050884826020860162000493565b91505092915050565b600060ff82169050919050565b620005298162000511565b81146200053557600080fd5b50565b60008151905062000549816200051e565b92915050565b6000806000606084860312156200056b576200056a62000388565b5b600084015167ffffffffffffffff8111156200058c576200058b6200038d565b5b6200059a86828701620004de565b935050602084015167ffffffffffffffff811115620005be57620005bd6200038d565b5b620005cc86828701620004de565b9250506040620005df8682870162000538565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200063c57607f821691505b602082108103620006525762000651620005f4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006bc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200067d565b620006c886836200067d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620007156200070f6200070984620006e0565b620006ea565b620006e0565b9050919050565b6000819050919050565b6200073183620006f4565b6200074962000740826200071c565b8484546200068a565b825550505050565b600090565b6200076062000751565b6200076d81848462000726565b505050565b5b8181101562000795576200078960008262000756565b60018101905062000773565b5050565b601f821115620007e457620007ae8162000658565b620007b9846200066d565b81016020851015620007c9578190505b620007e1620007d8856200066d565b83018262000772565b50505b505050565b600082821c905092915050565b60006200080960001984600802620007e9565b1980831691505092915050565b6000620008248383620007f6565b9150826002028217905092915050565b6200083f82620005e9565b67ffffffffffffffff8111156200085b576200085a620003ad565b5b62000867825462000623565b6200087482828562000799565b600060209050601f831160018114620008ac576000841562000897578287015190505b620008a3858262000816565b86555062000913565b601f198416620008bc8662000658565b60005b82811015620008e657848901518255600182019150602085019450602081019050620008bf565b8683101562000906578489015162000902601f891682620007f6565b8355505b6001600288020188555050505b505050505050565b612af8806200092b6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806370a08231116100de578063a217fddf11610097578063ca15c87311610071578063ca15c87314610498578063d547741f146104c8578063dd62ed3e146104e4578063e22cb7c91461051457610173565b8063a217fddf1461041a578063a457c2d714610438578063a9059cbb1461046857610173565b806370a082311461033257806370f9f4571461036257806379cc6790146103805780639010d07c1461039c57806391d14854146103cc57806395d89b41146103fc57610173565b80632f2ff15d116101305780632f2ff15d14610274578063313ce5671461029057806336568abe146102ae57806339509351146102ca57806340c10f19146102fa57806342966c681461031657610173565b806301ffc9a71461017857806306fdde03146101a8578063095ea7b3146101c657806318160ddd146101f657806323b872dd14610214578063248a9ca314610244575b600080fd5b610192600480360381019061018d9190611c85565b610532565b60405161019f9190611ccd565b60405180910390f35b6101b06105ac565b6040516101bd9190611d78565b60405180910390f35b6101e060048036038101906101db9190611e2e565b61063e565b6040516101ed9190611ccd565b60405180910390f35b6101fe610661565b60405161020b9190611e7d565b60405180910390f35b61022e60048036038101906102299190611e98565b61066b565b60405161023b9190611ccd565b60405180910390f35b61025e60048036038101906102599190611f21565b61069a565b60405161026b9190611f5d565b60405180910390f35b61028e60048036038101906102899190611f78565b6106b9565b005b6102986106da565b6040516102a59190611fd4565b60405180910390f35b6102c860048036038101906102c39190611f78565b6106f1565b005b6102e460048036038101906102df9190611e2e565b610774565b6040516102f19190611ccd565b60405180910390f35b610314600480360381019061030f9190611e2e565b6107ab565b005b610330600480360381019061032b9190611fef565b610844565b005b61034c6004803603810190610347919061201c565b610858565b6040516103599190611e7d565b60405180910390f35b61036a6108a1565b6040516103779190611f5d565b60405180910390f35b61039a60048036038101906103959190611e2e565b6108c5565b005b6103b660048036038101906103b19190612049565b6108e5565b6040516103c39190612098565b60405180910390f35b6103e660048036038101906103e19190611f78565b610914565b6040516103f39190611ccd565b60405180910390f35b61040461097e565b6040516104119190611d78565b60405180910390f35b610422610a10565b60405161042f9190611f5d565b60405180910390f35b610452600480360381019061044d9190611e2e565b610a17565b60405161045f9190611ccd565b60405180910390f35b610482600480360381019061047d9190611e2e565b610a8e565b60405161048f9190611ccd565b60405180910390f35b6104b260048036038101906104ad9190611f21565b610ab1565b6040516104bf9190611e7d565b60405180910390f35b6104e260048036038101906104dd9190611f78565b610ad5565b005b6104fe60048036038101906104f991906120b3565b610af6565b60405161050b9190611e7d565b60405180910390f35b61051c610b7d565b6040516105299190611f5d565b60405180910390f35b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105a557506105a482610cb1565b5b9050919050565b6060600580546105bb90612122565b80601f01602080910402602001604051908101604052809291908181526020018280546105e790612122565b80156106345780601f1061060957610100808354040283529160200191610634565b820191906000526020600020905b81548152906001019060200180831161061757829003601f168201915b5050505050905090565b600080610649610d2b565b9050610656818585610d33565b600191505092915050565b6000600454905090565b600080610676610d2b565b9050610683858285610efc565b61068e858585610f88565b60019150509392505050565b6000806000838152602001908152602001600020600101549050919050565b6106c28261069a565b6106cb81611201565b6106d58383611215565b505050565b6000600760009054906101000a900460ff16905090565b6106f9610d2b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d906121c5565b60405180910390fd5b6107708282611249565b5050565b60008061077f610d2b565b90506107a08185856107918589610af6565b61079b9190612214565b610d33565b600191505092915050565b6107bf6000801b6107ba610d2b565b610914565b806107f757506107f67fb49ea64ca9363ee24557fab3bed24140051b27b150a6658dd9436859666b28056107f1610d2b565b610914565b5b610836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082d90612294565b60405180910390fd5b610840828261127d565b5050565b61085561084f610d2b565b826113d4565b50565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7fb49ea64ca9363ee24557fab3bed24140051b27b150a6658dd9436859666b280581565b6108d7826108d1610d2b565b83610efc565b6108e182826113d4565b5050565b600061090c82600160008681526020019081526020016000206115a390919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606006805461098d90612122565b80601f01602080910402602001604051908101604052809291908181526020018280546109b990612122565b8015610a065780601f106109db57610100808354040283529160200191610a06565b820191906000526020600020905b8154815290600101906020018083116109e957829003601f168201915b5050505050905090565b6000801b81565b600080610a22610d2b565b90506000610a308286610af6565b905083811015610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c90612326565b60405180910390fd5b610a828286868403610d33565b60019250505092915050565b600080610a99610d2b565b9050610aa6818585610f88565b600191505092915050565b6000610ace600160008481526020019081526020016000206115bd565b9050919050565b610ade8261069a565b610ae781611201565b610af18383611249565b505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b7f1b29449712117a54a2a96c49e8068b0f884e4ce02b861028ef54f23e90ecdcd281565b610bab8282610914565b610c7d57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610c22610d2b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000610ca9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6115d2565b905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610d245750610d2382611642565b5b9050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d99906123b8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e089061244a565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610eef9190611e7d565b60405180910390a3505050565b6000610f088484610af6565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610f825781811015610f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6b906124b6565b60405180910390fd5b610f818484848403610d33565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fee90612548565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d906125da565b60405180910390fd5b6110718383836116ac565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156110f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ef9061266c565b60405180910390fd5b818103600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111e89190611e7d565b60405180910390a36111fb8484846116b1565b50505050565b6112128161120d610d2b565b6116b6565b50565b61121f8282610ba1565b6112448160016000858152602001908152602001600020610c8190919063ffffffff16565b505050565b611253828261173b565b611278816001600085815260200190815260200160002061181c90919063ffffffff16565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e3906126d8565b60405180910390fd5b6112f8600083836116ac565b806004600082825461130a9190612214565b9250508190555080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113bc9190611e7d565b60405180910390a36113d0600083836116b1565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143a9061276a565b60405180910390fd5b61144f826000836116ac565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156114d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cd906127fc565b60405180910390fd5b818103600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600460008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161158a9190611e7d565b60405180910390a361159e836000846116b1565b505050565b60006115b2836000018361184c565b60001c905092915050565b60006115cb82600001611877565b9050919050565b60006115de8383611888565b61163757826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061163c565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050565b505050565b6116c08282610914565b611737576116cd816118ab565b6116db8360001c60206118d8565b6040516020016116ec9291906128f0565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172e9190611d78565b60405180910390fd5b5050565b6117458282610914565b1561181857600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506117bd610d2b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000611844836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611b14565b905092915050565b60008260000182815481106118645761186361292a565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60606118d18273ffffffffffffffffffffffffffffffffffffffff16601460ff166118d8565b9050919050565b6060600060028360026118eb9190612959565b6118f59190612214565b67ffffffffffffffff81111561190e5761190d61299b565b5b6040519080825280601f01601f1916602001820160405280156119405781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106119785761197761292a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106119dc576119db61292a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611a1c9190612959565b611a269190612214565b90505b6001811115611ac6577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611a6857611a6761292a565b5b1a60f81b828281518110611a7f57611a7e61292a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611abf906129ca565b9050611a29565b5060008414611b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0190612a3f565b60405180910390fd5b8091505092915050565b60008083600101600084815260200190815260200160002054905060008114611c1c576000600182611b469190612a5f565b9050600060018660000180549050611b5e9190612a5f565b9050818114611bcd576000866000018281548110611b7f57611b7e61292a565b5b9060005260206000200154905080876000018481548110611ba357611ba261292a565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611be157611be0612a93565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611c22565b60009150505b92915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611c6281611c2d565b8114611c6d57600080fd5b50565b600081359050611c7f81611c59565b92915050565b600060208284031215611c9b57611c9a611c28565b5b6000611ca984828501611c70565b91505092915050565b60008115159050919050565b611cc781611cb2565b82525050565b6000602082019050611ce26000830184611cbe565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d22578082015181840152602081019050611d07565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d4a82611ce8565b611d548185611cf3565b9350611d64818560208601611d04565b611d6d81611d2e565b840191505092915050565b60006020820190508181036000830152611d928184611d3f565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dc582611d9a565b9050919050565b611dd581611dba565b8114611de057600080fd5b50565b600081359050611df281611dcc565b92915050565b6000819050919050565b611e0b81611df8565b8114611e1657600080fd5b50565b600081359050611e2881611e02565b92915050565b60008060408385031215611e4557611e44611c28565b5b6000611e5385828601611de3565b9250506020611e6485828601611e19565b9150509250929050565b611e7781611df8565b82525050565b6000602082019050611e926000830184611e6e565b92915050565b600080600060608486031215611eb157611eb0611c28565b5b6000611ebf86828701611de3565b9350506020611ed086828701611de3565b9250506040611ee186828701611e19565b9150509250925092565b6000819050919050565b611efe81611eeb565b8114611f0957600080fd5b50565b600081359050611f1b81611ef5565b92915050565b600060208284031215611f3757611f36611c28565b5b6000611f4584828501611f0c565b91505092915050565b611f5781611eeb565b82525050565b6000602082019050611f726000830184611f4e565b92915050565b60008060408385031215611f8f57611f8e611c28565b5b6000611f9d85828601611f0c565b9250506020611fae85828601611de3565b9150509250929050565b600060ff82169050919050565b611fce81611fb8565b82525050565b6000602082019050611fe96000830184611fc5565b92915050565b60006020828403121561200557612004611c28565b5b600061201384828501611e19565b91505092915050565b60006020828403121561203257612031611c28565b5b600061204084828501611de3565b91505092915050565b600080604083850312156120605761205f611c28565b5b600061206e85828601611f0c565b925050602061207f85828601611e19565b9150509250929050565b61209281611dba565b82525050565b60006020820190506120ad6000830184612089565b92915050565b600080604083850312156120ca576120c9611c28565b5b60006120d885828601611de3565b92505060206120e985828601611de3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061213a57607f821691505b60208210810361214d5761214c6120f3565b5b50919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006121af602f83611cf3565b91506121ba82612153565b604082019050919050565b600060208201905081810360008301526121de816121a2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061221f82611df8565b915061222a83611df8565b9250828201905080821115612242576122416121e5565b5b92915050565b7f446f6e742068617665204d696e746572207065726d697373696f6e2100000000600082015250565b600061227e601c83611cf3565b915061228982612248565b602082019050919050565b600060208201905081810360008301526122ad81612271565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612310602583611cf3565b915061231b826122b4565b604082019050919050565b6000602082019050818103600083015261233f81612303565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006123a2602483611cf3565b91506123ad82612346565b604082019050919050565b600060208201905081810360008301526123d181612395565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612434602283611cf3565b915061243f826123d8565b604082019050919050565b6000602082019050818103600083015261246381612427565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006124a0601d83611cf3565b91506124ab8261246a565b602082019050919050565b600060208201905081810360008301526124cf81612493565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612532602583611cf3565b915061253d826124d6565b604082019050919050565b6000602082019050818103600083015261256181612525565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006125c4602383611cf3565b91506125cf82612568565b604082019050919050565b600060208201905081810360008301526125f3816125b7565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612656602683611cf3565b9150612661826125fa565b604082019050919050565b6000602082019050818103600083015261268581612649565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006126c2601f83611cf3565b91506126cd8261268c565b602082019050919050565b600060208201905081810360008301526126f1816126b5565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612754602183611cf3565b915061275f826126f8565b604082019050919050565b6000602082019050818103600083015261278381612747565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006127e6602283611cf3565b91506127f18261278a565b604082019050919050565b60006020820190508181036000830152612815816127d9565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061285d60178361281c565b915061286882612827565b601782019050919050565b600061287e82611ce8565b612888818561281c565b9350612898818560208601611d04565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006128da60118361281c565b91506128e5826128a4565b601182019050919050565b60006128fb82612850565b91506129078285612873565b9150612912826128cd565b915061291e8284612873565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061296482611df8565b915061296f83611df8565b925082820261297d81611df8565b91508282048414831517612994576129936121e5565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006129d582611df8565b9150600082036129e8576129e76121e5565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612a29602083611cf3565b9150612a34826129f3565b602082019050919050565b60006020820190508181036000830152612a5881612a1c565b9050919050565b6000612a6a82611df8565b9150612a7583611df8565b9250828203905081811115612a8d57612a8c6121e5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212205c432aa9649565156cf82a12145e626d849bc923ffdba340dfb87b0716e48e3564736f6c63430008120033",
}

// ERC20AssetABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20AssetMetaData.ABI instead.
var ERC20AssetABI = ERC20AssetMetaData.ABI

// ERC20AssetBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20AssetMetaData.Bin instead.
var ERC20AssetBin = ERC20AssetMetaData.Bin

// DeployERC20Asset deploys a new Ethereum contract, binding an instance of ERC20Asset to it.
func DeployERC20Asset(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, decimals_ uint8) (common.Address, *types.Transaction, *ERC20Asset, error) {
	parsed, err := ERC20AssetMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20AssetBin), backend, name, symbol, decimals_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20Asset{ERC20AssetCaller: ERC20AssetCaller{contract: contract}, ERC20AssetTransactor: ERC20AssetTransactor{contract: contract}, ERC20AssetFilterer: ERC20AssetFilterer{contract: contract}}, nil
}

// ERC20Asset is an auto generated Go binding around an Ethereum contract.
type ERC20Asset struct {
	ERC20AssetCaller     // Read-only binding to the contract
	ERC20AssetTransactor // Write-only binding to the contract
	ERC20AssetFilterer   // Log filterer for contract events
}

// ERC20AssetCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20AssetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20AssetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20AssetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20AssetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20AssetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20AssetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20AssetSession struct {
	Contract     *ERC20Asset       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20AssetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20AssetCallerSession struct {
	Contract *ERC20AssetCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ERC20AssetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20AssetTransactorSession struct {
	Contract     *ERC20AssetTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ERC20AssetRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20AssetRaw struct {
	Contract *ERC20Asset // Generic contract binding to access the raw methods on
}

// ERC20AssetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20AssetCallerRaw struct {
	Contract *ERC20AssetCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20AssetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20AssetTransactorRaw struct {
	Contract *ERC20AssetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20Asset creates a new instance of ERC20Asset, bound to a specific deployed contract.
func NewERC20Asset(address common.Address, backend bind.ContractBackend) (*ERC20Asset, error) {
	contract, err := bindERC20Asset(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20Asset{ERC20AssetCaller: ERC20AssetCaller{contract: contract}, ERC20AssetTransactor: ERC20AssetTransactor{contract: contract}, ERC20AssetFilterer: ERC20AssetFilterer{contract: contract}}, nil
}

// NewERC20AssetCaller creates a new read-only instance of ERC20Asset, bound to a specific deployed contract.
func NewERC20AssetCaller(address common.Address, caller bind.ContractCaller) (*ERC20AssetCaller, error) {
	contract, err := bindERC20Asset(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20AssetCaller{contract: contract}, nil
}

// NewERC20AssetTransactor creates a new write-only instance of ERC20Asset, bound to a specific deployed contract.
func NewERC20AssetTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20AssetTransactor, error) {
	contract, err := bindERC20Asset(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20AssetTransactor{contract: contract}, nil
}

// NewERC20AssetFilterer creates a new log filterer instance of ERC20Asset, bound to a specific deployed contract.
func NewERC20AssetFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20AssetFilterer, error) {
	contract, err := bindERC20Asset(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20AssetFilterer{contract: contract}, nil
}

// bindERC20Asset binds a generic wrapper to an already deployed contract.
func bindERC20Asset(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20AssetMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Asset *ERC20AssetRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20Asset.Contract.ERC20AssetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Asset *ERC20AssetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Asset.Contract.ERC20AssetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Asset *ERC20AssetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Asset.Contract.ERC20AssetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Asset *ERC20AssetCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20Asset.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Asset *ERC20AssetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Asset.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Asset *ERC20AssetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Asset.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ERC20Asset *ERC20AssetCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ERC20Asset *ERC20AssetSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ERC20Asset.Contract.DEFAULTADMINROLE(&_ERC20Asset.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_ERC20Asset *ERC20AssetCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _ERC20Asset.Contract.DEFAULTADMINROLE(&_ERC20Asset.CallOpts)
}

// SCGATEWAYORACLEROLE is a free data retrieval call binding the contract method 0xe22cb7c9.
//
// Solidity: function SC_GATEWAY_ORACLE_ROLE() view returns(bytes32)
func (_ERC20Asset *ERC20AssetCaller) SCGATEWAYORACLEROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "SC_GATEWAY_ORACLE_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SCGATEWAYORACLEROLE is a free data retrieval call binding the contract method 0xe22cb7c9.
//
// Solidity: function SC_GATEWAY_ORACLE_ROLE() view returns(bytes32)
func (_ERC20Asset *ERC20AssetSession) SCGATEWAYORACLEROLE() ([32]byte, error) {
	return _ERC20Asset.Contract.SCGATEWAYORACLEROLE(&_ERC20Asset.CallOpts)
}

// SCGATEWAYORACLEROLE is a free data retrieval call binding the contract method 0xe22cb7c9.
//
// Solidity: function SC_GATEWAY_ORACLE_ROLE() view returns(bytes32)
func (_ERC20Asset *ERC20AssetCallerSession) SCGATEWAYORACLEROLE() ([32]byte, error) {
	return _ERC20Asset.Contract.SCGATEWAYORACLEROLE(&_ERC20Asset.CallOpts)
}

// SCMINTERROLE is a free data retrieval call binding the contract method 0x70f9f457.
//
// Solidity: function SC_MINTER_ROLE() view returns(bytes32)
func (_ERC20Asset *ERC20AssetCaller) SCMINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "SC_MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SCMINTERROLE is a free data retrieval call binding the contract method 0x70f9f457.
//
// Solidity: function SC_MINTER_ROLE() view returns(bytes32)
func (_ERC20Asset *ERC20AssetSession) SCMINTERROLE() ([32]byte, error) {
	return _ERC20Asset.Contract.SCMINTERROLE(&_ERC20Asset.CallOpts)
}

// SCMINTERROLE is a free data retrieval call binding the contract method 0x70f9f457.
//
// Solidity: function SC_MINTER_ROLE() view returns(bytes32)
func (_ERC20Asset *ERC20AssetCallerSession) SCMINTERROLE() ([32]byte, error) {
	return _ERC20Asset.Contract.SCMINTERROLE(&_ERC20Asset.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Asset *ERC20AssetCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Asset *ERC20AssetSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Asset.Contract.Allowance(&_ERC20Asset.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Asset *ERC20AssetCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Asset.Contract.Allowance(&_ERC20Asset.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Asset *ERC20AssetCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Asset *ERC20AssetSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Asset.Contract.BalanceOf(&_ERC20Asset.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Asset *ERC20AssetCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Asset.Contract.BalanceOf(&_ERC20Asset.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Asset *ERC20AssetCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Asset *ERC20AssetSession) Decimals() (uint8, error) {
	return _ERC20Asset.Contract.Decimals(&_ERC20Asset.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Asset *ERC20AssetCallerSession) Decimals() (uint8, error) {
	return _ERC20Asset.Contract.Decimals(&_ERC20Asset.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ERC20Asset *ERC20AssetCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ERC20Asset *ERC20AssetSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ERC20Asset.Contract.GetRoleAdmin(&_ERC20Asset.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_ERC20Asset *ERC20AssetCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _ERC20Asset.Contract.GetRoleAdmin(&_ERC20Asset.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ERC20Asset *ERC20AssetCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ERC20Asset *ERC20AssetSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _ERC20Asset.Contract.GetRoleMember(&_ERC20Asset.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_ERC20Asset *ERC20AssetCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _ERC20Asset.Contract.GetRoleMember(&_ERC20Asset.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ERC20Asset *ERC20AssetCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ERC20Asset *ERC20AssetSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _ERC20Asset.Contract.GetRoleMemberCount(&_ERC20Asset.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_ERC20Asset *ERC20AssetCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _ERC20Asset.Contract.GetRoleMemberCount(&_ERC20Asset.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ERC20Asset *ERC20AssetCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ERC20Asset *ERC20AssetSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ERC20Asset.Contract.HasRole(&_ERC20Asset.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_ERC20Asset *ERC20AssetCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _ERC20Asset.Contract.HasRole(&_ERC20Asset.CallOpts, role, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Asset *ERC20AssetCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Asset *ERC20AssetSession) Name() (string, error) {
	return _ERC20Asset.Contract.Name(&_ERC20Asset.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Asset *ERC20AssetCallerSession) Name() (string, error) {
	return _ERC20Asset.Contract.Name(&_ERC20Asset.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC20Asset *ERC20AssetCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC20Asset *ERC20AssetSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC20Asset.Contract.SupportsInterface(&_ERC20Asset.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC20Asset *ERC20AssetCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC20Asset.Contract.SupportsInterface(&_ERC20Asset.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Asset *ERC20AssetCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Asset *ERC20AssetSession) Symbol() (string, error) {
	return _ERC20Asset.Contract.Symbol(&_ERC20Asset.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Asset *ERC20AssetCallerSession) Symbol() (string, error) {
	return _ERC20Asset.Contract.Symbol(&_ERC20Asset.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Asset *ERC20AssetCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Asset.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Asset *ERC20AssetSession) TotalSupply() (*big.Int, error) {
	return _ERC20Asset.Contract.TotalSupply(&_ERC20Asset.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Asset *ERC20AssetCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20Asset.Contract.TotalSupply(&_ERC20Asset.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Asset *ERC20AssetTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Asset *ERC20AssetSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.Approve(&_ERC20Asset.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Asset *ERC20AssetTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.Approve(&_ERC20Asset.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ERC20Asset *ERC20AssetTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ERC20Asset *ERC20AssetSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.Burn(&_ERC20Asset.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ERC20Asset *ERC20AssetTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.Burn(&_ERC20Asset.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ERC20Asset *ERC20AssetTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ERC20Asset *ERC20AssetSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.BurnFrom(&_ERC20Asset.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ERC20Asset *ERC20AssetTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.BurnFrom(&_ERC20Asset.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Asset *ERC20AssetTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Asset *ERC20AssetSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.DecreaseAllowance(&_ERC20Asset.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Asset *ERC20AssetTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.DecreaseAllowance(&_ERC20Asset.TransactOpts, spender, subtractedValue)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ERC20Asset *ERC20AssetTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ERC20Asset *ERC20AssetSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20Asset.Contract.GrantRole(&_ERC20Asset.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_ERC20Asset *ERC20AssetTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20Asset.Contract.GrantRole(&_ERC20Asset.TransactOpts, role, account)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Asset *ERC20AssetTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Asset *ERC20AssetSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.IncreaseAllowance(&_ERC20Asset.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Asset *ERC20AssetTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.IncreaseAllowance(&_ERC20Asset.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_ERC20Asset *ERC20AssetTransactor) Mint(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "mint", to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_ERC20Asset *ERC20AssetSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.Mint(&_ERC20Asset.TransactOpts, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_ERC20Asset *ERC20AssetTransactorSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.Mint(&_ERC20Asset.TransactOpts, to, amount)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ERC20Asset *ERC20AssetTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ERC20Asset *ERC20AssetSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20Asset.Contract.RenounceRole(&_ERC20Asset.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_ERC20Asset *ERC20AssetTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20Asset.Contract.RenounceRole(&_ERC20Asset.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ERC20Asset *ERC20AssetTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ERC20Asset *ERC20AssetSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20Asset.Contract.RevokeRole(&_ERC20Asset.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_ERC20Asset *ERC20AssetTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _ERC20Asset.Contract.RevokeRole(&_ERC20Asset.TransactOpts, role, account)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20Asset *ERC20AssetTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20Asset *ERC20AssetSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.Transfer(&_ERC20Asset.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20Asset *ERC20AssetTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.Transfer(&_ERC20Asset.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20Asset *ERC20AssetTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20Asset *ERC20AssetSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.TransferFrom(&_ERC20Asset.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20Asset *ERC20AssetTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Asset.Contract.TransferFrom(&_ERC20Asset.TransactOpts, from, to, amount)
}

// ERC20AssetApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20Asset contract.
type ERC20AssetApprovalIterator struct {
	Event *ERC20AssetApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20AssetApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20AssetApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20AssetApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20AssetApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20AssetApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20AssetApproval represents a Approval event raised by the ERC20Asset contract.
type ERC20AssetApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Asset *ERC20AssetFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20AssetApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Asset.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20AssetApprovalIterator{contract: _ERC20Asset.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Asset *ERC20AssetFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20AssetApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Asset.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20AssetApproval)
				if err := _ERC20Asset.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Asset *ERC20AssetFilterer) ParseApproval(log types.Log) (*ERC20AssetApproval, error) {
	event := new(ERC20AssetApproval)
	if err := _ERC20Asset.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20AssetRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the ERC20Asset contract.
type ERC20AssetRoleAdminChangedIterator struct {
	Event *ERC20AssetRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20AssetRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20AssetRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20AssetRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20AssetRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20AssetRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20AssetRoleAdminChanged represents a RoleAdminChanged event raised by the ERC20Asset contract.
type ERC20AssetRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ERC20Asset *ERC20AssetFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*ERC20AssetRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ERC20Asset.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &ERC20AssetRoleAdminChangedIterator{contract: _ERC20Asset.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ERC20Asset *ERC20AssetFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *ERC20AssetRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _ERC20Asset.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20AssetRoleAdminChanged)
				if err := _ERC20Asset.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_ERC20Asset *ERC20AssetFilterer) ParseRoleAdminChanged(log types.Log) (*ERC20AssetRoleAdminChanged, error) {
	event := new(ERC20AssetRoleAdminChanged)
	if err := _ERC20Asset.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20AssetRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the ERC20Asset contract.
type ERC20AssetRoleGrantedIterator struct {
	Event *ERC20AssetRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20AssetRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20AssetRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20AssetRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20AssetRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20AssetRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20AssetRoleGranted represents a RoleGranted event raised by the ERC20Asset contract.
type ERC20AssetRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20Asset *ERC20AssetFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ERC20AssetRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20Asset.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20AssetRoleGrantedIterator{contract: _ERC20Asset.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20Asset *ERC20AssetFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ERC20AssetRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20Asset.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20AssetRoleGranted)
				if err := _ERC20Asset.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20Asset *ERC20AssetFilterer) ParseRoleGranted(log types.Log) (*ERC20AssetRoleGranted, error) {
	event := new(ERC20AssetRoleGranted)
	if err := _ERC20Asset.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20AssetRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the ERC20Asset contract.
type ERC20AssetRoleRevokedIterator struct {
	Event *ERC20AssetRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20AssetRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20AssetRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20AssetRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20AssetRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20AssetRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20AssetRoleRevoked represents a RoleRevoked event raised by the ERC20Asset contract.
type ERC20AssetRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20Asset *ERC20AssetFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ERC20AssetRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20Asset.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20AssetRoleRevokedIterator{contract: _ERC20Asset.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20Asset *ERC20AssetFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ERC20AssetRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20Asset.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20AssetRoleRevoked)
				if err := _ERC20Asset.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_ERC20Asset *ERC20AssetFilterer) ParseRoleRevoked(log types.Log) (*ERC20AssetRoleRevoked, error) {
	event := new(ERC20AssetRoleRevoked)
	if err := _ERC20Asset.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20AssetTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20Asset contract.
type ERC20AssetTransferIterator struct {
	Event *ERC20AssetTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20AssetTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20AssetTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20AssetTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20AssetTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20AssetTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20AssetTransfer represents a Transfer event raised by the ERC20Asset contract.
type ERC20AssetTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Asset *ERC20AssetFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20AssetTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Asset.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20AssetTransferIterator{contract: _ERC20Asset.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Asset *ERC20AssetFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20AssetTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Asset.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20AssetTransfer)
				if err := _ERC20Asset.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Asset *ERC20AssetFilterer) ParseTransfer(log types.Log) (*ERC20AssetTransfer, error) {
	event := new(ERC20AssetTransfer)
	if err := _ERC20Asset.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
